from aiogram import Router, types, F
from aiogram.filters import Command
from bot.keyboards.main import main_menu, settings_menu, frequency_settings_menu, notification_settings_menu
from db.service import DatabaseService, logger

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üîç –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ Telegram\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /gifts",
        reply_markup=main_menu()
    )


@router.message(Command("gifts"))
async def cmd_gifts(message: types.Message, db: DatabaseService):
    try:
        gifts = await db.get_recent_gifts(limit=5)
        if not gifts:
            return await message.answer("üéÅ –ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        response = "üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n" + "\n".join(
            f"{g.name} - {g.price} —Ä—É–±. (–∫–∞–Ω–∞–ª: {g.channel_id})"
            for g in gifts
        )
        await message.answer(response[:4000])
    except Exception as e:
        logger.error(f"Error getting gifts: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤")


@router.message(F.text == "üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏")
async def handle_gifts_button(message: types.Message, db: DatabaseService):
    try:
        gifts = await db.get_recent_gifts(limit=5)
        if not gifts:
            return await message.answer(
                "üéÅ –ù–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=main_menu()
            )

        response = ["üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏:"]
        for i, gift in enumerate(gifts, 1):
            response.append(
                f"{i}. {gift.name} - {gift.price} —Ä—É–±.\n"
                f"   –ö–∞–Ω–∞–ª: {gift.channel_id}\n"
                f"   –î–∞—Ç–∞: {gift.created_at.strftime('%d.%m.%Y %H:%M')}"
            )

        await message.answer(
            "\n".join(response)[:4000],
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"Error getting gifts: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤",
            reply_markup=main_menu()
        )


@router.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings_button(message: types.Message):
    await message.answer(
        "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=settings_menu()
    )

@router.callback_query(F.data == "notification_settings")
async def handle_notification_settings(callback: types.CallbackQuery, db: DatabaseService):
    settings = await db.get_user_settings(callback.from_user.id)
    await callback.message.edit_text(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=notification_settings_menu(
            settings.notifications_enabled,
            settings.update_frequency
        )
    )
    await callback.answer()


@router.callback_query(F.data == "update_frequency")
async def handle_frequency_settings(callback: types.CallbackQuery, db: DatabaseService):
    settings = await db.get_user_settings(callback.from_user.id)
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=frequency_settings_menu(settings.update_frequency)
    )
    await callback.answer()

@router.callback_query(F.data == "settings_back")
async def back_to_settings(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=settings_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery, db: DatabaseService):
    try:

        settings = await db.get_user_settings(callback.from_user.id)

        new_status = not settings.notifications_enabled
        await db.toggle_notifications(callback.from_user.id)

        status_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
        message_text = (
            f"{status_text}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ {settings.update_frequency} –º–∏–Ω"
        )

        new_keyboard = notification_settings_menu(new_status)

        current_text = callback.message.text or ""
        current_markup = callback.message.reply_markup

        if (current_text != message_text or
                str(current_markup) != str(new_keyboard)):
            await callback.message.edit_text(
                text=message_text,
                reply_markup=new_keyboard
            )
        else:
            await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
            return

        await callback.answer()

    except Exception as e:
        logger.error(f"Error toggling notifications: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data.startswith("set_freq_"))
async def set_update_frequency(callback: types.CallbackQuery, db: DatabaseService):
    freq = int(callback.data.split("_")[-1])
    await db.set_update_frequency(callback.from_user.id, freq)

    settings = await db.get_user_settings(callback.from_user.id)
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"

    await callback.message.edit_text(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}\n"
        f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ {freq} –º–∏–Ω",
        reply_markup=notification_settings_menu(settings.notifications_enabled)
    )
    await callback.answer(f"–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {freq} –º–∏–Ω")