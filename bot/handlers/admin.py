from typing import Union
import re
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.config import settings
from bot.keyboards.admin import admin_panel, monitoring_settings
from db.service import DatabaseService, logger

router = Router()

class AdminStates(StatesGroup):
    WAITING_FOR_PRICE_LIMIT = State()
    WAITING_FOR_CHANNEL_ADD = State()
    WAITING_FOR_CHANNEL_REMOVE = State()

def cancel_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ]
    )


@router.message(Command("admin"))
async def admin_cmd(message: types.Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery, db: DatabaseService):
    try:
        stats = await db.get_stats()
        await callback.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {stats['total_gifts']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['avg_price']} —Ä—É–±.\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {stats['tracked_channels']}",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        await callback.answer()


@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
        reply_markup=monitoring_settings()
    )
    await callback.answer()


@router.callback_query(F.data == "edit_channels")
async def edit_channels(callback: types.CallbackQuery, db: DatabaseService):
    try:
        channels = await db.get_channels()
        channels_text = "\n".join(f"‚Ä¢ {ch}" for ch in channels) if channels else "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"

        await callback.message.edit_text(
            f"üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
                    [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ]
            )
        )
    except Exception as e:
        logger.error(f"Error getting channels: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    finally:
        await callback.answer()


@router.callback_query(F.data == "edit_price_limit")
async def edit_price_limit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=cancel_inline_keyboard()
    )
    await state.set_state(AdminStates.WAITING_FOR_PRICE_LIMIT)
    await callback.answer()


@router.message(AdminStates.WAITING_FOR_PRICE_LIMIT)
async def process_price_limit(message: types.Message, state: FSMContext, db: DatabaseService):
    input_text = message.text.strip()

    if not input_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    if not re.fullmatch(r'^-?\d+([.,]\d+)?$', input_text):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 5500\n"
            "‚Ä¢ 5500.50\n"
            "‚Ä¢ 5,500",
            reply_markup=cancel_inline_keyboard()
        )
        return

    normalized = input_text.replace(',', '.')

    try:
        price_limit = float(normalized)

        if price_limit <= 0:
            await message.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        if price_limit > 1_000_000:
            await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç - 1 000 000 —Ä—É–±.")
            return

        await db.update_price_limit(price_limit)

        formatted_price = f"{price_limit:.2f}".replace('.00', '') if price_limit.is_integer() else f"{price_limit:.2f}"

        await message.answer(
            f"‚úÖ –õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {formatted_price} —Ä—É–±.",
            reply_markup=admin_panel()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏",
            reply_markup=admin_panel()
        )
        await state.clear()


@router.callback_query(F.data == "add_channel")
async def add_channel_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel –∏–ª–∏ -10012345678):",
        reply_markup=cancel_inline_keyboard()
    )
    await state.set_state(AdminStates.WAITING_FOR_CHANNEL_ADD)
    await callback.answer()


@router.message(AdminStates.WAITING_FOR_CHANNEL_ADD)
async def process_add_channel(message: types.Message, state: FSMContext, db: DatabaseService):
    try:
        channel_id = message.text.strip()
        await db.add_channel(channel_id)
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            reply_markup=admin_panel()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error adding channel: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
        await state.clear()


@router.callback_query(F.data == "remove_channel")
async def remove_channel_start(callback: types.CallbackQuery, state: FSMContext, db: DatabaseService):
    try:
        channels = await db.get_channels()
        if not channels:
            await callback.message.edit_text(
                "–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=admin_panel()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            )
            await callback.answer()
            return

        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=cancel_inline_keyboard()
        )
        await state.set_state(AdminStates.WAITING_FOR_CHANNEL_REMOVE)
    except Exception as e:
        logger.error(f"Error getting channels: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤",
            reply_markup=admin_panel()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
    finally:
        await callback.answer()

@router.message(AdminStates.WAITING_FOR_CHANNEL_REMOVE)
async def process_remove_channel(message: types.Message, state: FSMContext, db: DatabaseService):
    try:
        channel_id = message.text.strip()
        await db.remove_channel(channel_id)
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            reply_markup=admin_panel()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error removing channel: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
        await state.clear()


@router.callback_query(F.data == "admin_back")
async def back_to_admin(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel()
    )
    await callback.answer()

@router.callback_query(F.data == "cancel")
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    await state.clear()
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=admin_panel()
        )
        await message.answer()
    else:
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=admin_panel()
        )